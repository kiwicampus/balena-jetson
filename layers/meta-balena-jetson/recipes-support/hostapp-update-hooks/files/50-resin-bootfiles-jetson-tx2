#!/bin/sh

. /usr/libexec/os-helpers-fs

NVIDIA_PART_OFFSET="4097"
DEV_PATH="/dev/mmcblk0"
BOOT_PART="${DEV_PATH}boot0"
UPGRADE_PARTITIONS=0
BIN_INSTALL_PATH="/opt/tegra-binaries"
OFFS=(1659 5243 18043)
BOOT_BLOB="${BIN_INSTALL_PATH}/boot0.img"

update_needed() {
    current_update_file=${1}
    device=${2}
    update_size=$(ls -al $current_update_file | awk '{print $5}')
    update_md5sum=$(md5sum $current_update_file | awk '{print $1'})

    existing_md5sum=$(dd if=$device bs=1 count=$update_size status=none | md5sum | awk '{print $1}')

    if [ ! "$existing_md5sum" = "$update_md5sum" ]; then
        echo 1
    else
	echo 0
    fi
}

info_log()
{
    echo "[INFO] $@"
}

get_odm_value() {
    odm_off1=$(dd if=${1} skip=${OFFS[0]} bs=1 count=1 status=none | xxd -p)
    odm_off2=$(dd if=${1} skip=${OFFS[1]} bs=1 count=1 status=none | xxd -p)
    odm_off3=$(dd if=${1} skip=${OFFS[2]} bs=1 count=1 status=none | xxd -p)

    if [[ "${odm_off1}" == "${odm_off2}" ]] && [[ "${odm_off2}" == "${odm_off3}" ]]; then
        echo "${odm_off1}";
    else
        echo "unmatched";
    fi;
}

set_odm_value() {
    for offset in ${OFFS[@]}
    do
        info_log "Writing ODM byte ${1} to ${2} at offset ${offset}"
        echo -n -e "\\x${1}" | dd of=${2} seek=${offset} bs=1 count=1 conv=notrunc
    done
}

update_partition_binaries()
{
    for line in $(cat $1); do
        part_name=$(echo $line | cut -d ':' -f 1)
        file_name=$(echo $line | cut -d ':' -f 2)
	src="${BIN_INSTALL_PATH}/${file_name}"
	dst=$(get_state_path_from_label  "$part_name")
	if [ $(update_needed $src $dst) -eq 1 ]; then
            info_log "Will update ${dst}"
            dd if=${src} of=${dst} bs=1K
            info_log "Updated ${dst}"
        else
            info_log "No need to update ${dst}"
        fi
    done
}

NUM_ADSP_PART=$(parted -s ${DEV_PATH} print | grep adsp | wc -l)
if [ ${NUM_ADSP_PART} -lt 2 ]; then
    # adsp-fw partitions are mandatory only on L4T 32.2
    info_log "ADSP firmware partition NOT found:${NUM_ADSP_PART}. Will upgrade partition table to L4T 32.2"
    UPGRADE_PARTITIONS=1
else
    info_log "Found ${NUM_ADSP_PART} ADSP firmware partitions. No need to upgrade GPT"
fi

if [ ${UPGRADE_PARTITIONS} -eq 1 ]; then
    info_log "Removing old L4T 28.X partitions"
    idx=1
    while [ $idx -le 11 ]; do
        parted -s ${DEV_PATH} rm ${idx}
        idx=$(expr ${idx} \+ 1)
    done

    info_log "Proceeding to create new L4T partitions"

    partitions=$(cat "${BIN_INSTALL_PATH}/partition_specification186.txt")

    start=${NVIDIA_PART_OFFSET}
    for n in ${partitions}; do
        part_name=$(echo $n | cut -d ':' -f 1)
        file_name=$(echo $n | cut -d ':' -f 2)
        part_size=$(echo $n | cut -d ':' -f 3)
        end=$(expr ${start} \+ ${part_size} \- 1)
        parted -s ${DEV_PATH} unit s mkpart $part_name ${start} ${end}
        dd if="${BIN_INSTALL_PATH}/${file_name}" of=${DEV_PATH} conv=notrunc seek=${start}
        start=$(expr ${end} \+ 1)
    done

    info_log "Created L4T 32.X partitions"

    # Another issue with parted is incorrect number of partition entries
    # in gpt header at position 0x250. Fix gpt header so it can be interpreted
    # by the first bootloaders.
    sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk ${DEV_PATH}
    x
    l
    28
    r
    w
EOF

elif [ ${UPGRADE_PARTITIONS} -eq 0 ]; then
    update_partition_binaries "${BIN_INSTALL_PATH}/partition_specification186.txt"
fi

bootpart_odm=$(get_odm_value ${BOOT_PART});
bootblob_odm=$(get_odm_value ${BOOT_BLOB});

if [[ ${bootpart_odm} != "unmatched"} ]] && [[ ${bootblob_odm} != "unmatched" ]] ; then
    info_log "Valid ODMDATA values found in both ${BOOT_PART} and ${BOOT_BLOB}"
    if [[ ${bootpart_odm} == ${bootblob_odm} ]]; then
        info_log "No need to transfer existing ODMDATA"
    else
        info_log "Existing ODMDATA ${bootpart_odm} does not match HUP ODMDATA ${bootblob_odm}"
        set_odm_value ${bootpart_odm} ${BOOT_BLOB}
    fi;
else
    echo "[WARNING] Unmatched ODMDATA, will not update HUP blob: ${bootpart_odm} - ${bootblob_odm}"
fi

src=${BOOT_BLOB}
dst=${BOOT_PART}

if [ $(update_needed $src $dst) -eq 1 ]; then
    info_log "Will update $dst"
    echo 0 > /sys/block/mmcblk0boot0/force_ro
    dd if=${src} of=${dst} bs=1K
    echo 1 > /sys/block/mmcblk0boot0/force_ro
    info_log "Updated $dst"
else
    info_log "No need to update ${dst}"
fi

sync
