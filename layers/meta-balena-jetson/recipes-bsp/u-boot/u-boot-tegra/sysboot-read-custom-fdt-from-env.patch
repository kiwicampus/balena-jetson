From 9d1282e7ca2ed59740ade106d18033b19ebe86a2 Mon Sep 17 00:00:00 2001
From: Alexandru Costache <alexandru@balena.io>
Date: Wed, 27 Oct 2021 18:17:26 +0200
Subject: [PATCH] sysboot: Implement using custom dtb from env

Custom dtbs need to come with the OS image,in the root
partition, which is ro. If custom_fdt_file env variable
is set in extra_uEnv.txt from the boot partition
by the supervisor, then the specified file will be
attempted to be used.

If the specified dtb does not exist or cannot be loaded,
default one from root partition will be used. If that one
can't be loaded either, the one from raw partition is loaded.

Upstream-status: Inappropriate [configuration]
Signed-off-by: Alexandru Costache <alexandru@balena.io>
---
 cmd/pxe_utils.c | 47 +++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 43 insertions(+), 4 deletions(-)

diff --git a/cmd/pxe_utils.c b/cmd/pxe_utils.c
index 0e20fe7ec7..bbd8d49ad1 100644
--- a/cmd/pxe_utils.c
+++ b/cmd/pxe_utils.c
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0+
+// SPDX-License-Identifier: GPL-2.0+
 /*
  * Copyright 2010-2011 Calxeda, Inc.
  * Copyright (c) 2014-2021, NVIDIA CORPORATION.  All rights reserved.
@@ -26,6 +26,7 @@
 #include "pxe_utils.h"
 
 #define MAX_TFTP_PATH_LEN 512
+#define MAX_FDT_PATH_LEN  256
 
 bool is_pxe;
 
@@ -616,7 +617,7 @@ static int label_boot(cmd_tbl_t *cmdtp, struct pxe_label *label)
 				if (label->fdt) {
 					printf("Skipping %s for failure retrieving FDT\n",
 					       label->name);
-					goto cleanup;
+					printf("info: Will use default partition dtb to avoid boot failure\n");
 				}
 			}
 
@@ -1094,7 +1095,7 @@ static int parse_label(char **c, struct pxe_menu *cfg)
 {
 	struct token t;
 	int len;
-	char *s = *c;
+	char *s = *c, *env_fdt_file;
 	struct pxe_label *label;
 	int err;
 
@@ -1147,8 +1148,46 @@ static int parse_label(char **c, struct pxe_menu *cfg)
 			break;
 
 		case T_FDT:
-			if (!label->fdt)
+			if (!label->fdt) {
 				err = parse_sliteral(c, &label->fdt);
+                                if (!strncmp(label->fdt, "default", 7)) {
+                                       printf("info: found default FDT entry, look for custom_fdt_file environment variable\n");
+                                       err = 0;
+
+                                       env_fdt_file = env_get("custom_fdt_file");
+
+                                       if (!env_fdt_file) {
+                                               // If no custom device tree set from dashboard, try load the default dtb from rootfs
+                                               printf("info: Custom fdt file not defined. Look for default board fdt file\n");
+                                               env_fdt_file = env_get("board_fdt_file");
+                                       }
+
+                                       if (env_fdt_file) {
+                                               int fdtlen = strlen(env_fdt_file);
+
+                                               if (fdtlen + 7 > MAX_FDT_PATH_LEN) {
+                                                       printf("warning: fdt name too long, trimming");
+                                                       fdtlen = MAX_FDT_PATH_LEN - 7;
+                                               }
+
+                                               // freed afterwards by u-boot
+                                               label->fdt = malloc(MAX_FDT_PATH_LEN);
+
+                                               if (!label->fdt) {
+                                                       printf("warning: failed to allocate memory for fdt path! use default dtb\n");
+                                               } else {
+                                                       memset(label->fdt, '\0', sizeof(char) * MAX_FDT_PATH_LEN);
+
+                                                       // dtbs are located in the same folder as the kernel
+                                                       snprintf(label->fdt, fdtlen + 7, "/boot/%s", env_fdt_file);
+                                                       printf("info: fdt file now is %s\n", label->fdt);
+                                               }
+                                       } else {
+                                               printf("info: custom_fdt_file variable not defined, use default partition DTB\n");
+                                               label->fdt = NULL;
+                                       }
+                              }
+                       }
 			break;
 
 		case T_FDTDIR:
-- 
2.17.1

